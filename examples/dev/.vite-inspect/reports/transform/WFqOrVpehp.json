{
  "resolvedId": "D:/MyProject/5/alioth/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/split.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport isRegExp from './isRegExp.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nexport default split;\n",
      "start": 1698982453597,
      "end": 1698982453633,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1698982453633,
      "end": 1698982453633,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1698982453633,
      "end": 1698982453633,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1698982453633,
      "end": 1698982453633,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1698982453634,
      "end": 1698982453634,
      "order": "normal"
    }
  ]
}
