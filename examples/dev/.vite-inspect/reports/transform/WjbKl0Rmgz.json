{
  "resolvedId": "D:/MyProject/5/alioth/node_modules/.pnpm/lib0@0.2.80/node_modules/lib0/buffer.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\n\nimport * as string from './string.js'\nimport * as env from './environment.js'\nimport * as array from './array.js'\nimport * as math from './math.js'\nimport * as encoding from './encoding.js'\nimport * as decoding from './decoding.js'\n\n/**\n * @param {number} len\n */\nexport const createUint8ArrayFromLen = len => new Uint8Array(len)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer)\n\n/* c8 ignore start */\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Browser = bytes => {\n  let s = ''\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i])\n  }\n  // eslint-disable-next-line no-undef\n  return btoa(s)\n}\n/* c8 ignore stop */\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64')\n\n/* c8 ignore start */\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s)\n  const bytes = createUint8ArrayFromLen(a.length)\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i)\n  }\n  return bytes\n}\n/* c8 ignore stop */\n\n/**\n * @param {string} s\n */\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64')\n  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n\n/* c8 ignore next */\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node\n\n/* c8 ignore next */\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node\n\n/**\n * Base64 is always a more efficient choice. This exists for utility purposes only.\n *\n * @param {Uint8Array} buf\n */\nexport const toHexString = buf => array.map(buf, b => b.toString(16).padStart(2, '0')).join('')\n\n/**\n * Note: This function expects that the hex doesn't start with 0x..\n *\n * @param {string} hex\n */\nexport const fromHexString = hex => {\n  const hlen = hex.length\n  const buf = new Uint8Array(math.ceil(hlen / 2))\n  for (let i = 0; i < hlen; i += 2) {\n    buf[buf.length - i / 2 - 1] = Number.parseInt(hex.slice(hlen - i - 2, hlen - i), 16)\n  }\n  return buf\n}\n\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength)\n  newBuf.set(uint8Array)\n  return newBuf\n}\n\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\nexport const encodeAny = data => {\n  const encoder = encoding.createEncoder()\n  encoding.writeAny(encoder, data)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf))\n\n/**\n * Shift Byte Array {N} bits to the left. Does not expand byte array.\n *\n * @param {Uint8Array} bs\n * @param {number} N should be in the range of [0-7]\n */\nexport const shiftNBitsLeft = (bs, N) => {\n  if (N === 0) return bs\n  bs = new Uint8Array(bs)\n  bs[0] <<= N\n  for (let i = 1; i < bs.length; i++) {\n    bs[i - 1] |= bs[i] >>> (8 - N)\n    bs[i] <<= N\n  }\n  return bs\n}\n",
      "start": 1698982453784,
      "end": 1698982454224,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1698982454224,
      "end": 1698982454224,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1698982454224,
      "end": 1698982454225,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1698982454225,
      "end": 1698982454225,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1698982454225,
      "end": 1698982454225,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1698982454225,
      "end": 1698982454225,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1698982454225,
      "end": 1698982454225,
      "order": "normal"
    }
  ]
}
