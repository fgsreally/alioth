{
  "resolvedId": "D:/MyProject/5/alioth/node_modules/.pnpm/lib0@0.2.80/node_modules/lib0/storage.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* eslint-env browser */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* c8 ignore start */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  setItem (key, newValue) {\n    this.map.set(key, newValue)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n/* c8 ignore stop */\n\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\nlet usePolyfill = true\n\n/* c8 ignore start */\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n    usePolyfill = false\n  }\n} catch (e) { }\n/* c8 ignore stop */\n\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\n/* c8 ignore next */\nexport const varStorage = _localStorage\n\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n/* c8 ignore next */\nexport const onChange = eventHandler => usePolyfill || addEventListener('storage', /** @type {any} */ (eventHandler))\n\n/**\n * A polyfill for `removeEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n/* c8 ignore next */\nexport const offChange = eventHandler => usePolyfill || removeEventListener('storage', /** @type {any} */ (eventHandler))\n",
      "start": 1698982454864,
      "end": 1698982454977,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1698982454977,
      "end": 1698982454977,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1698982454978,
      "end": 1698982454978,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1698982454978,
      "end": 1698982454978,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1698982454978,
      "end": 1698982454978,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1698982454978,
      "end": 1698982454978,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1698982454978,
      "end": 1698982454978,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1698982454978,
      "end": 1698982454978,
      "order": "normal"
    }
  ]
}
