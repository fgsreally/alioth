{
  "resolvedId": "D:/MyProject/5/alioth/node_modules/.pnpm/lib0@0.2.80/node_modules/lib0/string.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import * as array from './array.js'\n\n/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode\nexport const fromCodePoint = String.fromCodePoint\n\n/**\n * The largest utf16 character.\n * Corresponds to Uint8Array([255, 255]) or charcodeof(2x2^8)\n */\nexport const MAX_UTF16_CHARACTER = fromCharCode(65535)\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase()\n\nconst trimLeftRegex = /^\\s*/g\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '')\n\nconst fromCamelCaseRegex = /([A-Z])/g\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`))\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  const buf = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i))\n  }\n  return buf\n}\n\n/* c8 ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* c8 ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length\n  let encodedString = ''\n  let bufPos = 0\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000\n    const bytes = buf.subarray(bufPos, bufPos + nextLen)\n    bufPos += nextLen\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n    remainingLen -= nextLen\n  }\n  return decodeURIComponent(escape(encodedString))\n}\n\n/* c8 ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true })\n\n/* c8 ignore start */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* c8 ignore next */\n  utf8TextDecoder = null\n}\n/* c8 ignore stop */\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */ (utf8TextDecoder).decode(buf)\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* c8 ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill\n\n/**\n * @param {string} str The initial string\n * @param {number} index Starting position\n * @param {number} remove Number of characters to remove\n * @param {string} insert New content to insert\n */\nexport const splice = (str, index, remove, insert = '') => str.slice(0, index) + insert + str.slice(index + remove)\n\n/**\n * @param {string} source\n * @param {number} n\n */\nexport const repeat = (source, n) => array.unfold(n, () => source).join('')\n",
      "start": 1698982453842,
      "end": 1698982454231,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1698982454231,
      "end": 1698982454231,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1698982454231,
      "end": 1698982454231,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1698982454231,
      "end": 1698982454231,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1698982454231,
      "end": 1698982454231,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1698982454231,
      "end": 1698982454231,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1698982454231,
      "end": 1698982454231,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1698982454231,
      "end": 1698982454231,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1698982454232,
      "end": 1698982454232,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1698982454232,
      "end": 1698982454232,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1698982454232,
      "end": 1698982454232,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1698982454232,
      "end": 1698982454232,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1698982454232,
      "end": 1698982454232,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1698982454232,
      "end": 1698982454232,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1698982454232,
      "end": 1698982454232,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1698982454232,
      "end": 1698982454232,
      "order": "normal"
    }
  ]
}
