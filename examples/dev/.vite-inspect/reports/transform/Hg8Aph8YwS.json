{
  "resolvedId": "D:/MyProject/5/alioth/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/chunk.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseSlice from './_baseSlice.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nexport default chunk;\n",
      "start": 1698982452951,
      "end": 1698982453103,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1698982453103,
      "end": 1698982453103,
      "order": "normal"
    }
  ]
}
