{
  "resolvedId": "D:/MyProject/5/alioth/node_modules/.pnpm/lib0@0.2.80/node_modules/lib0/environment.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module map\n */\n\nimport * as map from './map.js'\nimport * as string from './string.js'\nimport * as conditions from './conditions.js'\nimport * as storage from './storage.js'\nimport * as f from './function.js'\n\n/* c8 ignore next */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release &&\n  /node|io\\.js/.test(process.release.name)\n/* c8 ignore next */\nexport const isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && !isNode\n/* c8 ignore next 3 */\nexport const isMac = typeof navigator !== 'undefined'\n  ? /Mac/.test(navigator.platform)\n  : false\n\n/**\n * @type {Map<string,string>}\n */\nlet params\nconst args = []\n\n/* c8 ignore start */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create()\n      const pargs = process.argv\n      let currParamName = null\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i]\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '')\n          }\n          currParamName = parg\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg)\n            currParamName = null\n          } else {\n            args.push(parg)\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '')\n      }\n      // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create(); // eslint-disable-next-line no-undef\n      (location.search || '?').slice(1).split('&').forEach((kv) => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=')\n          params.set(`--${string.fromCamelCase(key, '-')}`, value)\n          params.set(`-${string.fromCamelCase(key, '-')}`, value)\n        }\n      })\n    } else {\n      params = map.create()\n    }\n  }\n  return params\n}\n/* c8 ignore stop */\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next */\nexport const hasParam = (name) => computeParams().has(name)\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* c8 ignore next 2 */\nexport const getParam = (name, defaultVal) =>\n  computeParams().get(name) || defaultVal\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 4 */\nexport const getVariable = (name) =>\n  isNode\n    ? conditions.undefinedToNull(process.env[name.toUpperCase()])\n    : conditions.undefinedToNull(storage.varStorage.getItem(name))\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 2 */\nexport const getConf = (name) =>\n  computeParams().get('--' + name) || getVariable(name)\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next 2 */\nexport const hasConf = (name) =>\n  hasParam('--' + name) || getVariable(name) !== null\n\n/* c8 ignore next */\nexport const production = hasConf('production')\n\n/* c8 ignore next 2 */\nconst forceColor = isNode &&\n  f.isOneOf(process.env.FORCE_COLOR, ['true', '1', '2'])\n\n/* c8 ignore start */\nexport const supportsColor = !hasParam('no-colors') &&\n  (!isNode || process.stdout.isTTY || forceColor) && (\n  !isNode || hasParam('color') || forceColor ||\n    getVariable('COLORTERM') !== null ||\n    (getVariable('TERM') || '').includes('color')\n)\n/* c8 ignore stop */\n",
      "start": 1698982454600,
      "end": 1698982454720,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1698982454720,
      "end": 1698982454720,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1698982454720,
      "end": 1698982454721,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1698982454721,
      "end": 1698982454721,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1698982454721,
      "end": 1698982454721,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1698982454721,
      "end": 1698982454721,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1698982454721,
      "end": 1698982454721,
      "order": "normal"
    }
  ]
}
