import{_ as e,o,c as p,U as c}from"./chunks/framework.08bb9a2c.js";const f=JSON.parse('{"title":"进展","description":"","frontmatter":{},"headers":[],"relativePath":"blog/changelog.md","filePath":"blog/changelog.md","lastUpdated":1707989327000}'),d={name:"blog/changelog.md"},a=c('<h1 id="进展" tabindex="-1">进展 <a class="header-anchor" href="#进展" aria-label="Permalink to &quot;进展&quot;">​</a></h1><p>啊说真的我已经被困住这个项目相当长一段时间了，现在看到这个界面就有一种孕吐的感觉...</p><p>我写过的中大型基建类项目都快凑够一只手了，一个项目好还是坏，靠不靠谱这个事情，大概初步进入生产时心里就有底了。</p><p>比如dubhe，其在模块联邦的同类项目里面具备绝对优势，但按设想的步骤进入生产时，发现真是无比鸡肋，虽然还有优化的空间，心里也知道前路无望，</p><p>又比如merak，虽然还存在样式问题，且目前没有什么解决的头猪，但接入时无比丝滑，故而由衷的开心，</p><p>但玉衡的情况麻烦的多，代码是没多少，但光是重建文件夹就有三轮了，我特么到现在为止都不确定这玩意儿是个什么水平。</p><p>从一开始的摇摇晃摇...不对，是拖拖拽拖，到以vite为核心实现接入和热更新，到这里为止，一切都挺好，因为这些功能确实很棒</p><p>但我没办法搞出一个好的<code>iframe</code>沙箱！</p><p>哎真是该死</p><p>有没有不用iframe的iframe啊</p><p>按玉衡的思路，用了<code>iframe</code>无非就是两种办法：</p><ol><li>把渲染的dom直接挂载iframe上，也就是所有js仍在主应用执行，但这会让很多操作变得复杂，比如画布内的拖拽，</li></ol><p>我一开始是直接将iframe的所有相关事件，调整属性透传到主应用，但当引入那个grid的时候，一切都失效了</p><p>我是想解决来着的，但依赖的那个什么interact的库，各个类缠在一起，类中有类，类上还有类</p><p>真的是给我创造压力</p><p>我只是想调试，不是想去世</p><p>而且就算解决了一个库，其他库一样会有问题，而限制一些库or一些行为，那么engine功能就大大受限，自定义的意义就没有了</p><ol start="2"><li>主子应用执行完全一样的东西，然后使用yjs做协同</li></ol><p>玉衡的模式其实就是：运行js而非json</p><p>iframe和主应用又不能运行同一个js文件，就只能每个都运转一遍</p><p>然后将主子应用的docModel实现协同，就可以在主子应用分别操作了</p><p>但yjs它没有y-iframe啊我淦，它只有websocket+webrtc+各种各样持久层。</p><p>而手动applyUpdate+observeDeep+update</p><p>差不多快把我送走了</p><p>我写到这里的时</p><h2 id="_10-7" tabindex="-1">10.7 <a class="header-anchor" href="#_10-7" aria-label="Permalink to &quot;10.7&quot;">​</a></h2><p>emmm 上次写到一半睡着了</p><p>问题不大</p><p>但沙箱还是没解决</p><p>等我有空了，先把<code>grid layout</code>为啥不能在现行沙箱中起效（来源自<code>@interactjs/interact</code>）的问题解决，</p><p>就能覆盖大部分基本使用了</p><p>沙箱对应的是<code>布局</code>,<code>响应式</code>的问题</p><p>但还有其他的问题--<code>状态</code>和<code>请求</code></p><p>虽然当下通过声明<code>js</code>变量，确实可以实现</p><p>但这样，太依赖自定义的规范，和平台之外的编码了</p><p>效率不够，也不方便收费...</p><p>这个时候我想到了以前的一个项目<a href="./.html">phecda-server</a>,就是一个可以类型共享(类<code>trpc</code>)的类<code>nestjs</code>框架</p><p>使用<code>trpc</code>时，调用函数，请求对应的<code>url</code>是什么，这是根据内部的规范，而<code>ps</code>是服务端生成元数据，客户端在编译时拿到元数据并拼凑请求</p><p>正常情况下，<code>ps</code>会增大编译负担，没有任何优势</p><p>但有元数据给以下流程提供了可能</p><ol><li>描述需求，通过<code>gpt</code> 生成模型</li><li>根据模型生成<code>p-s</code>代码，写入文件</li><li>通过元数据实现平台和服务端双向绑定,从而进行连续修改（通过<code>gpt</code>修改模型关系和大的结构）</li><li>声明前端数据，比如展示一组图片，那么前端应存在一个数组储存图片链接</li><li>进入<code>http</code>调试（类似<code>postman</code>），修改接口实现</li><li>保证所有<code>请求</code>正常，利用前面的前端数据和接口，进入<code>ui</code>编辑</li><li>打包-&gt;ci/cd-&gt;部署</li></ol><h2 id="_14-2-9" tabindex="-1">14.2.9 <a class="header-anchor" href="#_14-2-9" aria-label="Permalink to &quot;14.2.9&quot;">​</a></h2><p>我又怀念起这个项目了。。。我应该离成功稍微近了一点？也许吧。</p><p>沙箱是无法解决的问题，这是我唯一确定的事情。</p><blockquote><p>也许可以通过类似<code>merak</code>沙箱的方法解决，但我对此持高度怀疑...未来再说吧</p></blockquote><p>但除此之外进展相当之大，大概有以下几点</p><ol><li><code>figma</code>的经验非常有用，<code>crdt</code>完全是骗局（低代码领域），其除了会让问题变得更复杂以外，没有任何意义</li></ol><p>我不得不操作一个奇奇怪怪的数据结构，并想方设法让它和我的响应式数据同步</p><p>我一面跟我的<code>vue</code>数据讲这个<code>ymap</code>是个值得信任好同志，一面又讨好地去问<code>observerDeep</code>为什么没有监视到变化，有没有什么可以帮上忙的地方...</p><p>我放弃了<code>yjs</code>，这让我轻松了很多</p><ol start="2"><li>我搞了一个类似<code>serverless</code>的云开发的东西，原理几乎等同于<code>laf</code>，</li></ol><p>目前来讲只是个<code>demo</code>，但这给后续提供了很多想象空间</p><p>但不到三百行代码，我前前后后写了一个星期，整个过程中被<code>docker</code>和 <code>k8s</code>整的怀疑人生，</p><p>一面跟<code>gpt</code>斗智斗勇，一面在<code>csdn</code>垃圾堆里翻吃的。</p><p><code>stackoverflow</code>帮上了一点，但不多。</p><p>我最后用的是<code>mongodb</code>的官方云服务...所以不要问我怎么本地部署，我也没搞明白</p><p>我没有写使用教程，代码很少很简单，不可能看不懂的。</p><p>未来的计划是，</p><ol><li>发布<code>beta</code>版本，暂时不会考虑正式版本</li><li><code>serverless</code>要部署上线一个试试成分</li><li>试试<code>merak</code>沙箱</li></ol>',59),l=[a];function t(i,r,s,n,m,_){return o(),p("div",null,l)}const g=e(d,[["render",t]]);export{f as __pageData,g as default};
