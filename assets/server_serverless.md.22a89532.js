import{_ as e,o as a,c as r,U as o}from"./chunks/framework.08bb9a2c.js";const f=JSON.parse('{"title":"云服务","description":"","frontmatter":{},"headers":[],"relativePath":"server/serverless.md","filePath":"server/serverless.md","lastUpdated":1707989327000}'),t={name:"server/serverless.md"},s=o('<h1 id="云服务" tabindex="-1">云服务 <a class="header-anchor" href="#云服务" aria-label="Permalink to &quot;云服务&quot;">​</a></h1><blockquote><p>灵感来自<a href="https://github.com/labring/laf" target="_blank" rel="noreferrer">laf</a>,基于[phecda-server]</p></blockquote><blockquote><p>现在来讲，只是个尝试。如果要生产，还需要修改不少</p></blockquote><br><p>有点像<code>serverless</code>,沙箱中提供数据库/消息队列/对象存储等功能，上传代码至沙箱并运行</p><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>简而言之，</p><ol><li>放弃<code>serverless</code>冷启动的概念，通过<code>k8s</code>来实现扩容(只是目标，尚未实现)，</li></ol><p>可以理解为没人访问的时候，只保留一个最小的<code>pod</code>，人多的时候，增加</p><ol start="2"><li><p>放弃“函数”，专注于<code>phecda-server</code>（类<code>nestjs</code>格式），利用热更新提高开发体验</p></li><li><p>利用<code>ai</code>完成初步代码编写，后续人工调试</p></li></ol><h2 id="详情" tabindex="-1">详情 <a class="header-anchor" href="#详情" aria-label="Permalink to &quot;详情&quot;">​</a></h2><p><a href="https://github.com/fgsreally/alioth/tree/main/packages/nodejs" target="_blank" rel="noreferrer">alioth-nodejs</a>提供了一个很简单的镜像，只实现最基本的功能 <a href="https://github.com/fgsreally/alioth/tree/main/examples/server" target="_blank" rel="noreferrer">案例</a>中提供了<code>k8s</code>和<code>docker</code>两种方式，实现部署/更新代码</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>沙箱使用了<code>importModuleDynamically</code>，目前来看不太能用别的办法，是否有隐患不清楚</p></div>',13),l=[s];function c(d,i,n,p,h,_){return a(),r("div",null,l)}const u=e(t,[["render",c]]);export{f as __pageData,u as default};
