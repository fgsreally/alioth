import{_ as e,o as a,c as t,U as o}from"./chunks/framework.08bb9a2c.js";const f=JSON.parse('{"title":"features","description":"","frontmatter":{},"headers":[],"relativePath":"blog/feature.md","filePath":"blog/feature.md","lastUpdated":1707989327000}'),r={name:"blog/feature.md"},c=o('<h1 id="features" tabindex="-1">features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;features&quot;">​</a></h1><p>我认为<code>alioth</code>这三方面的特性，是需要被关注的</p><h3 id="热更新代替上传" tabindex="-1">热更新代替上传 <a class="header-anchor" href="#热更新代替上传" aria-label="Permalink to &quot;热更新代替上传&quot;">​</a></h3><p>所有开发完成的组件/预设，以<code>npm</code>包的形式使用，所有开发中的组件/预设，只需要在<code>vite</code>中加入插件</p><p>不再需要打包-&gt;上传-&gt;更新这种流程，开发者可以立刻观察效果并调试</p><h3 id="无特定规范-无学习成本" tabindex="-1">无特定规范，无学习成本 <a class="header-anchor" href="#无特定规范-无学习成本" aria-label="Permalink to &quot;无特定规范，无学习成本&quot;">​</a></h3><p>所有的“交互”，也就是需要<code>js</code>的行为，通通使用注入的思路，在<code>vscode</code>中声明这个行为，画布中操作即可，无需学习任何前置知识，无需任何规范</p><h3 id="无穷的自定义" tabindex="-1">无穷的自定义 <a class="header-anchor" href="#无穷的自定义" aria-label="Permalink to &quot;无穷的自定义&quot;">​</a></h3><p><a href="./custom.html">详见</a></p>',9),d=[c];function s(i,l,n,h,_,p){return a(),t("div",null,d)}const m=e(r,[["render",s]]);export{f as __pageData,m as default};
